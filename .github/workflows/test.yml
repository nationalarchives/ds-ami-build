# Deploy Website NginX Frontend AMI

name: Create Website NginX Frontend

permissions:
  id-token: write
  contents: write

on:
  workflow_dispatch:
    inputs:
      deploy-environment:
        type: choice
        description: Environment
        options:
        - dev
        - staging
        - production

jobs:
  ami-deployment-dev:
    if: github.event.inputs.deploy-environment == 'dev'
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: checkout repo
        uses: actions/checkout@v1

      - name: set ansible var file for dev
        run: |
          echo "ANSIBLE_VAR_FILE=vars_dev.yml" >> $GITHUB_ENV
          echo "SSH_KEY_FILE==wp-app-dev-london.pem" >> $GITHUB_ENV

      - name: get credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: arn:aws:iam::825668827209:role/GitHub-Actions-AMI-create
          web-identity-token-file: "${{ env.AWS_WEB_IDENTITY_TOKEN_FILE }}"
          aws-region: eu-west-2

      - name: auth settings
        run: |
          export AWS_ROLE_ARN=arn:aws:iam::825668827209:role/GitHub-Actions-AMI-create
          export AWS_WEB_IDENTITY_TOKEN_FILE=/tmp/awscreds
          export AWS_DEFAULT_REGION=eu-west-2

          echo AWS_WEB_IDENTITY_TOKEN_FILE=$AWS_WEB_IDENTITY_TOKEN_FILE >> $GITHUB_ENV
          echo AWS_ROLE_ARN=$AWS_ROLE_ARN >> $GITHUB_ENV
          echo AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION >> $GITHUB_ENV

          curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq -r '.value' > $AWS_WEB_IDENTITY_TOKEN_FILE
          sudo apt-get install awscli
          temp_role=$(aws sts assume-role-with-web-identity \
          --web-identity-token file://$AWS_WEB_IDENTITY_TOKEN_FILE \
          --role-arn "arn:aws:iam::825668827209:role/GitHub-Actions-AMI-create" \
          --role-session-name "ami-create")

          export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq -r .Credentials.AccessKeyId) >> GITHUB_ENV
          echo "::add-mask::$AWS_ACCESS_KEY_ID"
          export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq -r .Credentials.SecretAccessKey) >> GITHUB_ENV
          echo "::add-mask::$AWS_SECRET_ACCESS_KEY"
          export AWS_SESSION_TOKEN=$(echo $temp_role | jq -r .Credentials.SessionToken) >> GITHUB_ENV
          echo "::add-mask::$AWS_SESSION_TOKEN"

      - name: write ssh key file
        run: echo "${{ secrets.SSH_KEY }}" | tr -d '\r' > ${{ env.SSH_KEY_FILE }}

  #    - name: run ansible playbook
  #      uses: ./.github/actions/ansible
  #      with:
  #        playbook: website-nginx-ami-build.yml
  #        directory: ./website/nginx
  #        options: |
  #          --extra-vars ${{ env.ANSIBLE_VAR_FILE }}
  #          --private_key ${{ env.SSH_KEY_FILE }}
  #          --host_key_checking False


      - name: output environment details
        run: |
          echo "dev"
          echo ${{ github.event.inputs.deploy-environment }}
          echo ${{ env.ANSIBLE_VAR_FILE }}

  ami-deployment-staging:
    if: github.event.inputs.deploy-environment == 'staging'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: set ansible var file for test
        run: echo "ANSIBLE_VAR_FILE=vars_test.yml" >> $GITHUB_ENV
      - name: output environment details
        run: |
          echo "Staging"
          echo ${{ github.event.inputs.deploy-environment }}
          echo ${{ env.ANSIBLE_VAR_FILE }}
