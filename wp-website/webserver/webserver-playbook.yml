# WordPress webserver playbook
---

- name: create WordPress webserver AMI
  hosts: localhost
  gather_facts: false

  tasks:

  - name: load variables
    ansible.builtin.include_vars:
      file: "{{ ansible_var_file }}"

  - name: get AWS session token
    community.aws.sts_session_token:
      duration_seconds: 3600
    register: session_credentials

  - name: switch role credentials
    community.aws.sts_assume_role:
      aws_access_key: "{{ session_credentials.sts_creds.access_key }}"
      aws_secret_key: "{{ session_credentials.sts_creds.secret_key }}"
      security_token: "{{ session_credentials.sts_creds.session_token }}"
      role_arn: "{{ lookup ('env', 'AWS_ROLE_ARN') }}"
      role_session_name: "s-devops"
    register: assumed_role

  - name: get linux2 AMI
    amazon.aws.ec2_ami_info:
      aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
      aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      security_token: "{{ assumed_role.sts_creds.session_token }}"
      owners: amazon
      region: "{{ region }}"
      filters:
        name: "amzn2-ami-hvm*"
    register: findami

  - name: set latest AMI
    set_fact:
      latest_ami: >
        {{ findami.images | sort(attribute='creation_date') | last }}

  - name: set secrets
    vars:
      secret_data: "{{ lookup('amazon.aws.aws_secret', env + '/WordPress', region=region, aws_access_key=assumed_role.sts_creds.access_key, aws_secret_key=assumed_role.sts_creds.secret_key, aws_security_token=assumed_role.sts_creds.session_token, on_denied='warn') | from_json }}"
    set_fact:
        website_db_username: "{{ secret_data.website_db_username }}"
        website_db_password: "{{ secret_data.website_db_password }}"
        website_db_name: "{{ secret_data.website_db_name }}"
        github_token: "{{ secret_data.github_token }}"
        ses_username: "{{ secret_data.ses_username }}"
        ses_password: "{{ secret_data.ses_password }}"

  - name: template deployment policy
    template:
      src: "./templates/instance-role-policy.json.j2"
      dest: "./instance-role-policy.json"
      force: yes

  - name: get RDS security group ID
    amazon.aws.ec2_group_info:
      aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
      aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      security_token: "{{ assumed_role.sts_creds.session_token }}"
      filters:
        group-name:
          - "website-wp-{{ env }}-app-sg"
    register: db_sg
  - ansible.builtin.debug:
      msg:
        - "====================================================================="
        - "{{ db_sg }}"
        - "====================================================================="

  - name: "Create and associate production DMZ network ACL with DMZ subnets"
    community.aws.ec2_vpc_nacl:
      aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
      aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      security_token: "{{ assumed_role.sts_creds.session_token }}"
#      vpc_id: {{ VPC_ID }}
      name: ansible-nacl
      region: {{ region }}
#      subnets: ['public-subnet-2b-dev']
      tags:
        CostCode: CC1234
        Project: phoenix
        Description: production DMZ
      ingress:
          # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code,
          #                                             port from, port to
          - [100, 'tcp', 'allow', '0.0.0.0/0', null, null, 22, 22]
          - [200, 'tcp', 'allow', '0.0.0.0/0', null, null, 80, 80]
      egress:
          - [100, 'all', 'allow', '0.0.0.0/0', null, null, null, null]
      state: 'present'

  - name: create deployment policy
    community.aws.iam_managed_policy:
      aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
      aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      security_token: "{{ assumed_role.sts_creds.session_token }}"
      policy_name: "ansible-ami-website-wp-s3-policy"
      policy: "{{ lookup('file', './instance-role-policy.json') }}"
      state: "present"
    register: s3_policy

  - name: create webserver IAM role
    community.aws.iam_role:
      aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
      aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      security_token: "{{ assumed_role.sts_creds.session_token }}"
      name: "ansible-ami-website-wp-role"
      region: "{{ region }}"
      assume_role_policy_document: "{{ lookup('file', './wp-role-policy.json') }}"
      managed_policies: ["{{ s3_policy.policy.arn }}", "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"]
      create_instance_profile: yes
      purge_policies: yes
      state: "present"
    register: wp_iam_role

  - name: create security group - allowing updates and downloads
    amazon.aws.ec2_group:
      aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
      aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      security_token: "{{ assumed_role.sts_creds.session_token }}"
      name: "ansible-ami-website-wp-sg"
      description: "security group allowing updates and downloads"
      region: "{{ region }}"
      vpc_id: "{{ lookup( 'env', 'VPC_ID') }}"
      rules:
        - proto: "tcp"
          from_port: 22
          to_port: 22
          cidr_ip: "0.0.0.0/0"
          rule_desc: "allow incoming ssh connections"
        - proto: "tcp"
          from_port: 1024
          to_port: 65535
          cidr_ip: "0.0.0.0/0"
          rule_desc: "for updates and downloads"
      rules_egress:
        - proto: "tcp"
          from_port: 80
          to_port: 80
          cidr_ip: "0.0.0.0/0"
          rule_desc: "allow updates and downloads"
        - proto: "tcp"
          from_port: 443
          to_port: 443
          cidr_ip: "0.0.0.0/0"
          rule_desc: "allow updates and downloads"
        - proto: "tcp"
          from_port: 1024
          to_port: 65535
          cidr_ip: "0.0.0.0/0"
          rule_desc: "allow replies"
      state: "present"
    register: ec2_sec_group

  - name: template userdata
    vars:
      db_host: "db.{{ service }}wp.{{ env }}.local"
    template:
      src: "./templates/userdata.sh.j2"
      dest: "./userdata.sh"
      force: yes


- name: switch to localhost
  hosts: localhost
  gather_facts: true

  tasks:
  - name: "remove NACL rule"
    community.aws.ec2_vpc_nacl:
      aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
      aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      security_token: "{{ assumed_role.sts_creds.session_token }}"
      name: ansible-nacl
      region: {{ region }}
      ingress:
          - [200, 'tcp', 'allow', '0.0.0.0/0', null, null, 80, 80]
      state: 'absent'

#  - name: create AMI
#    amazon.aws.ec2_ami:
#      aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
#      aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
#      security_token: "{{ assumed_role.sts_creds.session_token }}"
#      instance_id: "{{ instance_id }}"
#      name: "{{ service }}-wp-primer-{{ env }}-{{ ansible_date_time.date }} {{ ansible_date_time.hour }}-{{ ansible_date_time.minute }}-{{ ansible_date_time.second }}"
#      description: "Website webserver - ready for deployment"
#      region: "{{ region }}"
#      state: "present"
#      wait: yes
#      tags:
#        Name: "{{ service }}-wp-primer-{{ env }}-{{ ansible_date_time.date }} {{ ansible_date_time.hour }}-{{ ansible_date_time.minute }}-{{ ansible_date_time.second }}"
#        Service: "{{ service }}"
#        Owner: "Digital Services"
#        CreatedBy: "ansible"
#        CostCentre: 53
#        Terraform: false

  - name: terminate instance
    ec2_instance:
      aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
      aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      security_token: "{{ assumed_role.sts_creds.session_token }}"
      instance_ids: "{{ instance_id }}"
      region: "{{ region }}"
      state: "absent"

  - name: remove security group
    amazon.aws.ec2_group:
      aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
      aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      security_token: "{{ assumed_role.sts_creds.session_token }}"
      name: "ansible-ami-website-wp-sg"
      region: "{{ region }}"
      state: "absent"

  - name: remove IAM role
    community.aws.iam_role:
      aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
      aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      security_token: "{{ assumed_role.sts_creds.session_token }}"
      name: "ansible-ami-website-wp-role"
      region: "{{ region }}"
      state: "absent"

  - name: remove deployment policy
    community.aws.iam_managed_policy:
      aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
      aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      security_token: "{{ assumed_role.sts_creds.session_token }}"
      policy_name: "ansible-ami-website-wp-s3-policy"
      state: "absent"
