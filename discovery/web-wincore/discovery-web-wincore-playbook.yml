# Discovery webserver playbook
---

- name: create Discovery webserver AMI
  hosts: localhost
  gather_facts: false

  tasks:
  - name: load variables
    ansible.builtin.include_vars:
      file: "{{ ansible_var_file }}"

  - name: get AWS session token
    community.aws.sts_session_token:
      duration_seconds: 3600
    register: session_credentials

  - name: switch role credentials
    community.aws.sts_assume_role:
      aws_access_key: "{{ session_credentials.sts_creds.access_key }}"
      aws_secret_key: "{{ session_credentials.sts_creds.secret_key }}"
      security_token: "{{ session_credentials.sts_creds.session_token }}"
      role_arn: "{{ lookup ('env', 'AWS_ROLE_ARN') }}"
      role_session_name: "s-devops"
    register: assumed_role

  - name: get Windows 2019 Core AMI
    amazon.aws.ec2_ami_info:
      aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
      aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      security_token: "{{ assumed_role.sts_creds.session_token }}"
      owners: amazon
      region: "{{ region }}"
      filters:
        name: "Windows_Server-2019-English-Core-Base*"
    register: findami

  - name: set latest AMI
    set_fact:
      latest_ami: >
        {{ findami.images | sort(attribute='creation_date') | last }}

  - name: template deployment policy
    template:
      src: "./templates/instance-role-policy.json.j2"
      dest: "./instance-role-policy.json"
      force: yes

  - name: create deployment policy
    community.aws.iam_managed_policy:
      aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
      aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      security_token: "{{ assumed_role.sts_creds.session_token }}"
      policy: "{{ lookup('file', './instance-role-policy.json') }}"
      policy_name: "ansible-ami-discovery-web-s3-policy"
      state: "present"
    register: s3_policy

  - name: create discovery webserver IAM role
    community.aws.iam_role:
      aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
      aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      security_token: "{{ assumed_role.sts_creds.session_token }}"
      name: "ansible-ami-discovery-web-role"
      region: "{{ region }}"
      assume_role_policy_document: "{{ lookup('file', './discovery-web-wincore-role-policy.json') }}"
      managed_policies: [ "{{ s3_policy.policy.arn }}", "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM" ]
      create_instance_profile: yes
      purge_policies: yes
      state: "present"
    register: discovery_iam_role

  - name: create security group - allowing updates and downloads
    amazon.aws.ec2_group:
      aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
      aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      security_token: "{{ assumed_role.sts_creds.session_token }}"
      name: "ansible-ami-discovery-web-sg"
      description: "security group allowing updates and downloads"
      region: "{{ region }}"
      vpc_id: "{{ lookup( 'env', 'VPC_ID') }}"
      rules:
        - proto: "tcp"
          from_port: 22
          to_port: 22
          cidr_ip: "0.0.0.0/0"
          rule_desc: "allow incoming ssh connections"
        - proto: "tcp"
          from_port: 1024
          to_port: 65535
          cidr_ip: "0.0.0.0/0"
          rule_desc: "for updates and downloads"
      rules_egress:
        - proto: "tcp"
          from_port: 80
          to_port: 80
          cidr_ip: "0.0.0.0/0"
          rule_desc: "allow updates and downloads"
        - proto: "tcp"
          from_port: 443
          to_port: 443
          cidr_ip: "0.0.0.0/0"
          rule_desc: "allow updates and downloads"
        - proto: "tcp"
          from_port: 1024
          to_port: 65535
          cidr_ip: "0.0.0.0/0"
          rule_desc: "allow replies"
      state: "present"
    register: ec2_sec_group

  - name: generate admin password
    set_fact:
      password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=16') }}"

  - ansible.builtin.debug:
      msg:
        - "====================================================================="
        - "{{ password }}"
        - "====================================================================="

  - name: template userdata
    template:
      src: "./templates/userdata.ps1.j2"
      dest: "./userdata.ps1"
      force: yes

  - name: provisioning instance
    amazon.aws.ec2_instance:
      aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
      aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      security_token: "{{ assumed_role.sts_creds.session_token }}"
      key_name: "{{ key_name }}"
      image_id: "{{ latest_ami.image_id }}"#
      instance_role: "ansible-ami-discovery-web-role"
      instance_type: "t3a.large"
      metadata_options:
        http_endpoint: "enabled"
        http_tokens: "required"
      name: "{{ service }}-web-wincore-primer-{{ env }}"
      network:
        assign_public_ip: yes
        delete_on_termination: yes
        subnet_id: "{{ lookup('env', 'SUBNET_ID') }}"
      region: "{{ region }}"
      security_groups: [ "{{ ec2_sec_group.group_id }}" ]
      state: "running"
      termination_protection: no
      user_data: "{{ lookup('file', './userdata.ps1') }}"
      wait: true
      wait_timeout: 500
      volumes:
        - device_name: "/dev/xvda"
          ebs:
            delete_on_termination: true
            encrypted: true
            volume_size: "{{ volume_size }}"
      vpc_subnet_id: "{{ lookup('env', 'SUBNET_ID') }}"
      tags:
        Environment: "{{ env }}"
        Service: "{{ service }}"
        Owner: "Digital Services"
        CreatedBy: "ansible"
        CostCentre: 53
        Terraform: false
    register: ec2

  - name: get instance ip address
    set_fact:
      instance_private_ip: "{{ ec2.instances[0].private_ip_address }}"
      instance_public_ip: "{{ ec2.instances[0].public_ip_address }}"
      instance_id: "{{ ec2.instances[0].instance_id }}"

  - ansible.builtin.debug:
      msg:
        - "====================================================================="
        - "instance started up"
        - "instance private ip: {{ instance_private_ip }}"
        - "instance id: {{ instance_id }}"
        - "instance public ip {{ instance_public_ip }}"
        - "====================================================================="

  - name: register new ec2 as host
    add_host:
      hostname: "{{ instance_public_ip }}:5986"
      groups: winhosts
      ansible_user: ansible-winrm
      ansible_password: "{{ password }}"
      ansible_connection: winrm
      ansible_port: 5986
      ansible_winrm_transport: basic
      ansible_winrm_message_encryption: auto
      ansible_winrm_server_cert_validation: ignore

  - name: wait for WinRM port to be open
    ansible.builtin.wait_for:
      host: "{{ instance_public_ip }}"
      port: 5986
      delay: 120
      timeout: 600
      sleep: 10
      state: started
    register: port
    tags: [ ami ]

- name: switching hosts
  hosts: winhosts
  gather_facts: no
  connection: winrm
  port: 5986

  tasks:
  - ansible.builtin.debug:
      msg:
        - "====================================================================="
        - "checking status of instance initial script"
        - "20 second interval with max duration of 15 minutes"
        - "====================================================================="
  - name: check if ec2 instance is ready
    ansible.windows.win_stat:
      path: "C:\\finish-init.txt"
    register: init_finished
    until: init_finished.stat.exists
    retries: 45
    delay: 20

  - name: IIS and ASP.NET features part 1 - 3
    ansible.windows.win_feature:
      name: Web-Default-Doc,Web-Dir-Browsing,Web-Http-Errors,Web-Static-Content,Web-Http-Redirect,Web-Http-Logging

  - name: IIS and ASP.NET features part 2 - 3
    ansible.windows.win_feature:
      name: Web-Stat-Compression,Web-Filtering,Web-Url-Auth,Web-Net-Ext45,Web-Asp-Net45,Web-ISAPI-Ext,Web-ISAPI-Filter,Web-Mgmt-Console

  - name: IIS and ASP.NET features part 3 - 3
    ansible.windows.win_feature:
      name: NET-Framework-45-Core,NET-WCF-HTTP-Activation45,NET-WCF-TCP-PortSharing45

  - name: ensure temp dir exists
    win_file:
      path: "c:\\temp"
      state: directory

  - name: ensure tna-startup dir exists
    win_file:
      path: "c:\\tna-startup"
      state: directory

  - name: copy file-downloader script
    win_copy:
      src: "./files/file-downloader.ps1"
      dest: "c:\\temp\\file-downloader.ps1"

  - name: copy server-setup script
    win_copy:
      src: "./files/server-setup.ps1"
      dest: "c:\\temp\\server-setup.ps1"

  - name: copy startup script
    win_copy:
      src: "./files/startup.ps1"
      dest: "c:\\tna-startup\\startup.ps1"

  - name: copy updEnv script
    win_copy:
      src: "./files/updEnv.ps1"
      dest: "c:\\tna-startup\\updEnv.ps1"

  - ansible.builtin.debug:
      msg:
        - "====================================================================="
        - "run server setup for {{ hostvars['localhost']['env'] }} - tier web
        - "====================================================================="

  - name: run server-setup script
    ansible.windows.win_powershell:
      script: |
        cd c:\temp
        ./server-setup.ps1 -environment "{{ hostvars['localhost']['env'] }}" -tier "web" -application "discovery"

  - ansible.builtin.debug:
      msg:
        - "====================================================================="
        - "checking status of instance setup"
        - "20 second interval with max duration of 15 minutes"
        - "====================================================================="

  - name: check if ec2 instance is ready
    ansible.builtin.win_stat:
      path: "C:\\setup-status.txt"
    register: setup_status
    until: "setup_status.stat.exists"
    retries: 45
    delay: 20


- name: switch to localhost
  hosts: localhost
  gather_facts: true
  tasks:

  - name: create AMI
    amazon.aws.ec2_ami:
      aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
      aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      security_token: "{{ assumed_role.sts_creds.session_token }}"
      instance_id: "{{ instance_id }}"
      name: "{{ service }}-discovery-web-primer-{{ env }}-{{ ansible_date_time.date }} {{ ansible_date_time.hour }}-{{ ansible_date_time.minute }}-{{ ansible_date_time.second }}"
      description: "Discovery Frontend server - wincore - ready for deployment"
      region: "{{ region }}"
      state: "present"
      wait: yes
      tags:
        Name: "{{ service }}-discovery-web-primer-{{ env }}-{{ ansible_date_time.date }} {{ ansible_date_time.hour }}-{{ ansible_date_time.minute }}-{{ ansible_date_time.second }}"
        Service: "{{ service }}"
        Owner: "Digital Services"
        CreatedBy: "ansible"
        CostCentre: 53
        Terraform: false

  - name: terminate instance
    ec2_instance:
      aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
      aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      security_token: "{{ assumed_role.sts_creds.session_token }}"
      instance_ids: "{{ instance_id }}"
      region: "{{ region }}"
      state: "absent"

  - name: remove security group
    amazon.aws.ec2_group:
      aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
      aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      security_token: "{{ assumed_role.sts_creds.session_token }}"
      name: "ansible-ami-discovery-web-sg"
      region: "{{ region }}"
      state: "absent"

  - name: remove IAM role
    community.aws.iam_role:
      aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
      aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      security_token: "{{ assumed_role.sts_creds.session_token }}"
      name: "ansible-ami-discover-web-role"
      region: "{{ region }}"
      delete_instance_profile: yes
      state: "absent"

  - name: remove deployment policy
    community.aws.iam_managed_policy:
      aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
      aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
      security_token: "{{ assumed_role.sts_creds.session_token }}"
      policy_name: "ansible-ami-discovery-web-s3-policy"
      state: "absent"
